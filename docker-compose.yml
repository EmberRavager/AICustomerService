# Docker Compose 配置文件 - 智能客服系统
version: '3.8'

services:
  # 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: chatbot-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - DATABASE_URL=sqlite:///./data/chatbot.db
      - CHROMA_PERSIST_DIRECTORY=/app/data/chroma
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_API_BASE=${OPENAI_API_BASE:-https://api.openai.com/v1}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: chatbot-frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - chatbot-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  chatbot-network:
    driver: bridge
    name: chatbot-network

volumes:
  redis-data:
    driver: local
    name: chatbot-redis-data